#include "imports/stdlib.fc";

[int, int, slice, int, int, int, int, int, cell, cell] msg_params() asm "INMSGPARAMS";

int in_msg_bounce() asm "INMSG_BOUNCE";
int in_msg_bounced() asm "INMSG_BOUNCED";
slice in_msg_src() asm "INMSG_SRC";
int in_msg_fwd() asm "INMSG_FWDFEE";
int in_msg_lt() asm "INMSG_LT";
int in_msg_utime() asm "INMSG_UTIME";
int in_msg_orig_value() asm "INMSG_ORIGVALUE";
int in_msg_value() asm "INMSG_VALUE";
cell in_msg_value_extra() asm "INMSG_VALUEEXTRA";
cell in_msg_state_init() asm "INMSG_STATEINIT";

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

builder handle_op(int op, int query_id) impure inline_ref {
    builder msgBody   = null();

    if(op == 1) {
        var [bounce, bounced, sender_local, fwd_fee, created_lt, created_at, orig_value, param_msg_value, value_extra, state_init] =  msg_params();

        msgBody = begin_cell()
               .store_int(bounce, 1)
               .store_int(bounced, 1)
               .store_slice(sender_local)
               .store_coins(fwd_fee)
               .store_uint(created_lt, 64)
               .store_uint(created_at, 32)
               .store_ref(begin_cell().store_coins(orig_value).store_coins(param_msg_value).store_maybe_ref(value_extra).end_cell())
               .store_maybe_ref(state_init);
    }

    if(op == 2) {
        msgBody = begin_cell().store_int(in_msg_bounce(), 1);
    }
    if(op == 3) {
        msgBody = begin_cell().store_int(in_msg_bounced(), 1);
    }
    if(op == 4) {
        msgBody = begin_cell().store_slice(in_msg_src());
    }
    if(op == 5) {
        msgBody = begin_cell().store_coins(in_msg_fwd());
    }
    if(op == 6) {
        msgBody = begin_cell().store_uint(in_msg_lt(), 64);
    }
    if(op == 7) {
        msgBody = begin_cell().store_uint(in_msg_utime(), 32);
    }
    if(op == 8) {
        msgBody = begin_cell().store_coins(in_msg_orig_value());
    }
    if(op == 9) {
        msgBody = begin_cell().store_coins(in_msg_value());
    }
    if(op == 10) {
        msgBody = begin_cell().store_maybe_ref(in_msg_value_extra());
    }
    if(op == 11) {
        msgBody = begin_cell().store_maybe_ref(in_msg_state_init());
    }

    return msgBody;
}

() recv_external(slice in_msg_body) impure {
    {-
        No replay protection whatsoever.
        This contract is purely for testing new instructions in emulator
        and should never be deployed to network
    -}

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    slice send_to = in_msg_body~load_msg_addr();

    accept_message();
    builder msgBody = handle_op(op, query_id);

    send_msg(send_to, 0, 42, 0, msgBody, 3);
    throw_if(0xffff, msgBody.null?());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return ();
    }


    var (op, query_id) = (
        in_msg_body~load_uint(32),
        in_msg_body~load_uint(64)
    );

    slice in_msg_full_slice = in_msg_full.begin_parse();

    int msg_flags = in_msg_full_slice~load_msg_flags();
    slice sender  = in_msg_full_slice~load_msg_addr();

    var msgBody = handle_op(op, query_id);
    send_msg(sender, 0, 42, query_id, msgBody, 64);
    throw_if(0xffff, msgBody.null?());
}

cell test_get(int op) method_id {
    return handle_op(op, 0).end_cell();
}
